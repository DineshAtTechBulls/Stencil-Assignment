{"file":"my-counter.entry.esm.js","mappings":";;AAAA,MAAM,YAAY,GAAG,yCAAyC;;MCOjD,SAAS;;;iBAEK,CAAC;;;EAG1B,oBAAoB,CAAC,KAAK;IACtB,OAAO,CAAC,GAAG,CAAC,UAAU,GAAE,KAAK,CAAC,MAAM,CAAC,CAAC;IACtC,IAAG,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;MAC9B,IAAI,CAAC,KAAK,EAAG,CAAC;GACjB;EAED,iBAAiB;IACf,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;GACnC;EAED,oBAAoB;IAClB,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;GACtC;EAED,gBAAgB;IACd,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;GAC5C;EAED,kBAAkB;IAChB,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;GACrC;EAED,iBAAiB;IACf,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;GAClD;EAED,mBAAmB;IACjB,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;GACpD;EAGD,kBAAkB,CAAC,QAAe,EAAE,QAAe,EAAE,QAAe;IAClE,OAAO,CAAC,GAAG,CAAC,cAAc,QAAQ,gBAAgB,QAAQ,gBAAgB,QAAQ,EAAE,CAAC,CAAC;GAEvF;EAGD,MAAM;IAEJ,QACE,EAAC,IAAI,QACH,iCAAmB,YAAM,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,WAAW,GAAG,MAAM,IAAG,IAAI,CAAC,KAAK,CAAQ,CAAI,EAC9F,iBAAW,IAAI,EAAC,OAAO,EAAC,eAAe,EAAE,CAAC,IAAI,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,GAAc,CACnF,EACP;GACH;;;;;;;;;","names":[],"sources":["./src/components/my-counter/my-counter.css?tag=my-counter&encapsulation=shadow","./src/components/my-counter/my-counter.tsx"],"sourcesContent":[".highlight{\n  color: green;\n}\n\n.warn{\n  color: red;\n}\n","import { Component, Host,  Prop, State, Watch, h } from '@stencil/core';\n\n@Component({\n  tag: 'my-counter',\n  styleUrl: 'my-counter.css',\n  shadow: true,\n})\nexport class MyCounter{\n\n  @State() count: number = 0;\n  @Prop() open:boolean;\n\n  clickListenerHandler(event){\n      console.log(\"counter:\"+ event.detail);\n      if(!Number.isNaN(event.detail))\n      this.count ++;\n  }\n\n  connectedCallback(){\n    console.log(\"connected callback\"); \n  }\n\n  disconnectedCallback(){\n    console.log(\"disconnected callback\");\n  }\n\n  componentDidLoad() {\n    console.log('Component has been rendered');\n  }\n\n  componentDidUpdate() {\n    console.log('Component did update');\n  }\n\n  componentWillLoad() {\n    console.log('Component is about to be rendered');\n  }\n\n  componentWillUpdate() {\n    console.log('Component will update and re-render');\n  }\n\n  @Watch(\"count\")\n  watchCountVariable(newValue:number, oldValue:number, propName:string){\n    console.log(`newValue : ${newValue}, oldValue : ${oldValue}, propName : ${propName}`);\n    \n  }\n\n\n  render() {\n\n    return (\n      <Host>\n        <p>counter value = <code class={this.count > 5 ? \"highlight\" : \"warn\"}>{this.count}</code></p>\n        <my-button name='count' onButtonClicked={e => this.clickListenerHandler(e)}></my-button>\n      </Host>\n    );\n  } \n\n}\n"],"version":3}